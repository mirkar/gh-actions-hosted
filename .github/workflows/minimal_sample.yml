# This is a basic workflow to help you get started with Actions

name: Feature-CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ feature ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
     -  name: Prepare run environment
        run: echo setting up run environment 
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: setup

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          make --help
          make --version
      - name: Application Version
        uses: paulhatch/semantic-version@v4.0.2
        id: version
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          format: "${major}.${minor}.${patch}-prerelease${increment}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          #change_path: "src/my-service"
          # Named version, will be used as suffix for name version tag
          namespace: project-b
          # Indicate whether short tags like 'v1' should be supported. If false only full
          # tags like 'v1.0.0' will be recognized.
          short_tags: true
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
      - name: Semver
        # https://github.com/marketplace/actions/git-semantic-version
        run: |
          echo ${{steps.version.outputs.version}}
          echo ${{steps.version.outputs.version_tag}}
          echo ${{steps.version.outputs.major}}
          echo ${{steps.version.outputs.minor}}
          echo ${{steps.version.outputs.patch}}
          echo ${{steps.version.outputs.increment}}
         

  test-unit:
    runs-on: ubuntu-latest
    needs: build
    steps:
     -  name: Execute unit tests
        run: echo Running unit tests 

  test-integration:
    runs-on: ubuntu-latest
    needs: build
    steps:
     -  name: Execute integration tests
        run: echo Running integration tests


  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    steps:
     -  name: Execute deployment
        run: echo Running deployment